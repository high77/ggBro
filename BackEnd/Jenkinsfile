
pipeline {
    agent any
    environment {
        REPO = "s10-final/S10P31C206"
        DOCKERHUB_REGISTRY = "kimhyeokil/back"
        DOCKERHUB_CREDENTIALS = credentials('Docker-hub')
        DB_URL = "${env.DB_URL}"
        DB_NAME = "${env.DB_NAME}"
        DB_PASSWORD = "${env.DB_PASSWORD}"
        REDIS_HOST="${env.REDIS_HOST}"
        JWT_ACCESS="${env.JWT_ACCESS}"
        JWT_REFRESH="${env.JWT_REFRESH}"

    }
    stages {
        stage('Checkout') {
            steps {
                checkout scm
                echo "JWT_ACCESS: ${env.JWT_ACCESS}"
                echo "DB_URL: ${env.DB_URL}"
                echo "REDIS_HOST: ${env.REDIS_HOST}"
                echo "JWT_REFRESH: ${env.JWT_REFRESH}"
                echo "DB_NAME: ${env.DB_NAME}"

            }
        }
        stage('Setup Environment') {
            steps {
                dir("${env.WORKSPACE}/BackEnd"){
                    script {
                        sh "ls -al"
                        sh "chmod +x ./gradlew"
                    }
                }
            }
        }
        stage("Build") {
            steps {
                script {
                    sh "docker build -t ${DOCKERHUB_REGISTRY} BackEnd"
                }
            }
        }
        stage("Login") {
            steps {
                 sh "echo \${DOCKERHUB_CREDENTIALS_PSW} | docker login -u \${DOCKERHUB_CREDENTIALS_USR} --password-stdin"
            }
        }
        stage("Tag and Push") {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker push ${DOCKERHUB_REGISTRY}"
                    }
                }
            }
        }
        stage('Prune old images'){
            steps{
                script{
                    sh "docker ps"
                }
            }
        }
        stage('Pull') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        sh "docker stop back || true"  // Ignore error ifgit  container doesn't exist
                        sh "docker rm back || true"    // Ignore error if container doesn't exist
                        sh "docker rmi ${DOCKERHUB_REGISTRY}|| true"     //images 날리기
                        sh "docker pull ${DOCKERHUB_REGISTRY}"
                    }
                }
            }
        }
        stage('Up') {
            steps {
                script {
                    withCredentials([[$class: 'UsernamePasswordMultiBinding', credentialsId: 'Docker-hub', usernameVariable: 'DOCKER_USER_ID', passwordVariable: 'DOCKER_USER_PASSWORD']]) {
                        try {
                        sh "docker run -d --name back -p 9003:8080 \
                        -e DB_URL=${env.DB_URL} \
                        -e DB_NAME=${env.DB_NAME} \
                        -e DB_PASSWORD=${env.DB_PASSWORD} \
                        -e REDIS_HOST=${env.REDIS_HOST} \
                        -e JWT_ACCESS=${env.JWT_ACCESS} \
                        -e JWT_REFRESH=${env.JWT_REFRESH} \
                        ${DOCKERHUB_REGISTRY}"
//                             sh "docker-compose -f ${env.WORKSPACE}/docker-compose.yml up -d"

                        } catch(Exception e) {
                            sh "docker restart back || true"  // Ignore error if container doesn't exist
                        }
                    }
                }
            }
        }


    }
}